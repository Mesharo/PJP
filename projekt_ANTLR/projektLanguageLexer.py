# Generated from projektLanguage.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,225,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,
        17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
        20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
        25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,
        28,1,28,1,28,1,29,1,29,5,29,167,8,29,10,29,12,29,170,9,29,1,30,4,
        30,173,8,30,11,30,12,30,174,1,31,4,31,178,8,31,11,31,12,31,179,1,
        31,1,31,4,31,184,8,31,11,31,12,31,185,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,3,32,197,8,32,1,33,1,33,5,33,201,8,33,10,33,12,
        33,204,9,33,1,33,1,33,1,34,4,34,209,8,34,11,34,12,34,210,1,34,1,
        34,1,35,1,35,1,35,1,35,5,35,219,8,35,10,35,12,35,222,9,35,1,35,1,
        35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,1,0,6,4,0,36,36,65,90,95,95,97,122,3,0,48,57,65,90,
        97,122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,
        10,10,13,13,232,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,75,1,0,0,0,5,77,1,0,0,0,
        7,79,1,0,0,0,9,81,1,0,0,0,11,83,1,0,0,0,13,85,1,0,0,0,15,87,1,0,
        0,0,17,89,1,0,0,0,19,91,1,0,0,0,21,93,1,0,0,0,23,95,1,0,0,0,25,97,
        1,0,0,0,27,99,1,0,0,0,29,101,1,0,0,0,31,103,1,0,0,0,33,106,1,0,0,
        0,35,109,1,0,0,0,37,112,1,0,0,0,39,115,1,0,0,0,41,117,1,0,0,0,43,
        123,1,0,0,0,45,127,1,0,0,0,47,133,1,0,0,0,49,140,1,0,0,0,51,145,
        1,0,0,0,53,150,1,0,0,0,55,156,1,0,0,0,57,159,1,0,0,0,59,164,1,0,
        0,0,61,172,1,0,0,0,63,177,1,0,0,0,65,196,1,0,0,0,67,198,1,0,0,0,
        69,208,1,0,0,0,71,214,1,0,0,0,73,74,5,59,0,0,74,2,1,0,0,0,75,76,
        5,123,0,0,76,4,1,0,0,0,77,78,5,125,0,0,78,6,1,0,0,0,79,80,5,40,0,
        0,80,8,1,0,0,0,81,82,5,41,0,0,82,10,1,0,0,0,83,84,5,44,0,0,84,12,
        1,0,0,0,85,86,5,33,0,0,86,14,1,0,0,0,87,88,5,45,0,0,88,16,1,0,0,
        0,89,90,5,42,0,0,90,18,1,0,0,0,91,92,5,47,0,0,92,20,1,0,0,0,93,94,
        5,37,0,0,94,22,1,0,0,0,95,96,5,43,0,0,96,24,1,0,0,0,97,98,5,46,0,
        0,98,26,1,0,0,0,99,100,5,62,0,0,100,28,1,0,0,0,101,102,5,60,0,0,
        102,30,1,0,0,0,103,104,5,61,0,0,104,105,5,61,0,0,105,32,1,0,0,0,
        106,107,5,33,0,0,107,108,5,61,0,0,108,34,1,0,0,0,109,110,5,38,0,
        0,110,111,5,38,0,0,111,36,1,0,0,0,112,113,5,124,0,0,113,114,5,124,
        0,0,114,38,1,0,0,0,115,116,5,61,0,0,116,40,1,0,0,0,117,118,5,119,
        0,0,118,119,5,104,0,0,119,120,5,105,0,0,120,121,5,108,0,0,121,122,
        5,101,0,0,122,42,1,0,0,0,123,124,5,105,0,0,124,125,5,110,0,0,125,
        126,5,116,0,0,126,44,1,0,0,0,127,128,5,102,0,0,128,129,5,108,0,0,
        129,130,5,111,0,0,130,131,5,97,0,0,131,132,5,116,0,0,132,46,1,0,
        0,0,133,134,5,115,0,0,134,135,5,116,0,0,135,136,5,114,0,0,136,137,
        5,105,0,0,137,138,5,110,0,0,138,139,5,103,0,0,139,48,1,0,0,0,140,
        141,5,98,0,0,141,142,5,111,0,0,142,143,5,111,0,0,143,144,5,108,0,
        0,144,50,1,0,0,0,145,146,5,114,0,0,146,147,5,101,0,0,147,148,5,97,
        0,0,148,149,5,100,0,0,149,52,1,0,0,0,150,151,5,119,0,0,151,152,5,
        114,0,0,152,153,5,105,0,0,153,154,5,116,0,0,154,155,5,101,0,0,155,
        54,1,0,0,0,156,157,5,105,0,0,157,158,5,102,0,0,158,56,1,0,0,0,159,
        160,5,101,0,0,160,161,5,108,0,0,161,162,5,115,0,0,162,163,5,101,
        0,0,163,58,1,0,0,0,164,168,7,0,0,0,165,167,7,1,0,0,166,165,1,0,0,
        0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,60,1,0,0,0,
        170,168,1,0,0,0,171,173,7,2,0,0,172,171,1,0,0,0,173,174,1,0,0,0,
        174,172,1,0,0,0,174,175,1,0,0,0,175,62,1,0,0,0,176,178,7,2,0,0,177,
        176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
        181,1,0,0,0,181,183,5,46,0,0,182,184,7,2,0,0,183,182,1,0,0,0,184,
        185,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,64,1,0,0,0,187,188,
        5,116,0,0,188,189,5,114,0,0,189,190,5,117,0,0,190,197,5,101,0,0,
        191,192,5,102,0,0,192,193,5,97,0,0,193,194,5,108,0,0,194,195,5,115,
        0,0,195,197,5,101,0,0,196,187,1,0,0,0,196,191,1,0,0,0,197,66,1,0,
        0,0,198,202,5,34,0,0,199,201,8,3,0,0,200,199,1,0,0,0,201,204,1,0,
        0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,202,1,0,
        0,0,205,206,5,34,0,0,206,68,1,0,0,0,207,209,7,4,0,0,208,207,1,0,
        0,0,209,210,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,212,1,0,
        0,0,212,213,6,34,0,0,213,70,1,0,0,0,214,215,5,47,0,0,215,216,5,47,
        0,0,216,220,1,0,0,0,217,219,8,5,0,0,218,217,1,0,0,0,219,222,1,0,
        0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,220,1,0,
        0,0,223,224,6,35,0,0,224,72,1,0,0,0,9,0,168,174,179,185,196,202,
        210,220,1,6,0,0
    ]

class projektLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    WHILE = 21
    INT = 22
    FLOAT = 23
    STRING = 24
    BOOL = 25
    READ = 26
    WRITE = 27
    IF = 28
    ELSE = 29
    IDENTIFIER = 30
    INT_LITERAL = 31
    FLOAT_LITERAL = 32
    BOOL_LITERAL = 33
    STRING_LITERAL = 34
    WS = 35
    LINE_COMMENT = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'}'", "'('", "')'", "','", "'!'", "'-'", "'*'", 
            "'/'", "'%'", "'+'", "'.'", "'>'", "'<'", "'=='", "'!='", "'&&'", 
            "'||'", "'='", "'while'", "'int'", "'float'", "'string'", "'bool'", 
            "'read'", "'write'", "'if'", "'else'" ]

    symbolicNames = [ "<INVALID>",
            "WHILE", "INT", "FLOAT", "STRING", "BOOL", "READ", "WRITE", 
            "IF", "ELSE", "IDENTIFIER", "INT_LITERAL", "FLOAT_LITERAL", 
            "BOOL_LITERAL", "STRING_LITERAL", "WS", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "WHILE", "INT", "FLOAT", "STRING", "BOOL", "READ", "WRITE", 
                  "IF", "ELSE", "IDENTIFIER", "INT_LITERAL", "FLOAT_LITERAL", 
                  "BOOL_LITERAL", "STRING_LITERAL", "WS", "LINE_COMMENT" ]

    grammarFileName = "projektLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


